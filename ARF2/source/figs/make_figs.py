# -*- coding: utf-8 -*-
# This file was *autogenerated* from the file make_figs.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_1p = RealNumber('1.'); _sage_const_3p = RealNumber('3.'); _sage_const_0p05 = RealNumber('0.05'); _sage_const_40 = Integer(40); _sage_const_1p0 = RealNumber('1.0'); _sage_const_115 = Integer(115); _sage_const_0p1 = RealNumber('0.1'); _sage_const_0p0 = RealNumber('0.0'); _sage_const_0p3 = RealNumber('0.3'); _sage_const_p05 = RealNumber('.05'); _sage_const_0p5 = RealNumber('0.5'); _sage_const_15 = Integer(15); _sage_const_2p = RealNumber('2.'); _sage_const_50 = Integer(50); _sage_const_120 = Integer(120); _sage_const_125 = Integer(125); _sage_const_100 = Integer(100); _sage_const_90 = Integer(90); _sage_const_365p = RealNumber('365.'); _sage_const_140 = Integer(140)
var('S')
def longCALL(S,K,P=_sage_const_0 ):
    return max_symbolic(S-K,_sage_const_0 )-P
def longPUT(S,K,P=_sage_const_0 ):
    return max_symbolic(K-S,_sage_const_0 )-P
def shortCALL(S,K,P=_sage_const_0 ):
    return -max_symbolic(S-K,_sage_const_0 )+P
def shortPUT(S,K,P=_sage_const_0 ):
    return -max_symbolic(K-S,_sage_const_0 )+P


from scipy.stats import norm
import numpy as np 
def BlackScholes(S0,K,r,T,sigma):
    d1=(np.log(S0/K)+(r+sigma**_sage_const_2 /_sage_const_2 )*T)/(sigma*np.sqrt(T));
    d2=d1-sigma*np.sqrt(T);
    C = S0*norm.cdf(d1)-K*exp(-r*T)*norm.cdf(d2);
    P = K*np.exp(-r*T)*norm.cdf(-d2)-S0*norm.cdf(-d1);
    return (C,P)


var('sigma,S0,K,T,r')
__tmp__=var("x"); cdf = symbolic_expression(_sage_const_1 /_sage_const_2 *(_sage_const_1 +erf(x/sqrt(_sage_const_2 )))).function(x)
d1=(log(S0/K)+(r+sigma**_sage_const_2 /_sage_const_2 )*T)/(sigma*sqrt(T))
d2=d1-sigma*sqrt(T)
__tmp__=var("S0,K,r,T,sigma"); C = symbolic_expression(S0*cdf(d1)-K*exp(-r*T)*cdf(d2)).function(S0,K,r,T,sigma)
__tmp__=var("S0,K,r,T,sigma"); P = symbolic_expression(K*exp(-r*T)*cdf(-d2)-S0*cdf(-d1)).function(S0,K,r,T,sigma)

def plotOption(OPTION=longCALL,S0=_sage_const_115 ,K=_sage_const_125 , c='red'):
    var('S')
    S1,S2 = _sage_const_100 ,_sage_const_140 
    sigma = _sage_const_0p1 
    if "CALL" in OPTION.__name__:
        cena = C 
    else:
        cena = P
    if "short" in OPTION.__name__:
        k = -_sage_const_1p0 
    else:
        k = _sage_const_1p0     

    SP = cena(S0,K,_sage_const_0p0 ,_sage_const_1 ,sigma).n()       
    p  = plot( OPTION(S,K,SP),(S,S1,S2),color=c)
    p += plot(k*(cena(x,K,_sage_const_0p0 ,_sage_const_1 ,sigma)-SP),(x,S1,S2),color='gray',thickness=_sage_const_0p5 )
    p += point([(K,_sage_const_0 ),(S0,_sage_const_0 )],color='brown',size=_sage_const_40 ,gridlines=[[K],[]])
    p += text(r"$K$",(K,_sage_const_2 ))
    p += text(r"$S_0$",(S0,k*_sage_const_2 ))
    return p

def plotOptions(OPTIONS=[longCALL,longPUT],Ks=[_sage_const_125 ,_sage_const_120 ], cs=['red','green'],alpha=None,pltbs=True):
    var('S')
    S1,S2 = _sage_const_100 ,_sage_const_140 
    sigma = _sage_const_0p1 
    p = Graphics()
    Osum,BSsum  = _sage_const_0 ,_sage_const_0 
    if alpha==None:
        a = [_sage_const_1p0 ]*len(OPTIONS)+[_sage_const_1p0 ]
    else:
        a = [alpha[_sage_const_1 ]]*len(OPTIONS)+[alpha[_sage_const_1 ]]
        a[alpha[_sage_const_0 ]]=_sage_const_1p0         
    for i,(OPTION,K,c) in enumerate(zip(OPTIONS,Ks,cs)):
        if "CALL" in OPTION.__name__:
            No = _sage_const_0 
        else:
            No = _sage_const_1    
        if "long" in OPTION.__name__:
            C = +_sage_const_1p0 
        else:
            C = -_sage_const_1p0     
        P = BlackScholes(_sage_const_115 ,K,_sage_const_0p0 ,_sage_const_1 ,sigma)[No]
        x = np.linspace(S1,S2,_sage_const_50 )    
        BS =  C*( BlackScholes(x,K,_sage_const_0p0 ,_sage_const_1 ,sigma)[No] - P)
        p += plot( OPTION(S,K,P),(S,S1,S2),thickness=_sage_const_2p ,color=c,alpha=a[i])
        if pltbs: 
            p += line(zip(x,BS),color=c,thickness=_sage_const_1p ,alpha=a[i])
        p += point([(K,_sage_const_0 )],color=c,size=_sage_const_40 ,alpha=a[i])
        p += text(r"$K_%d$"%(i+_sage_const_1 ),(K,_sage_const_2 ),fontsize=_sage_const_15 ,color=c)
        Osum += OPTION(S,K,P)
        BSsum += BS
    p += plot( Osum,(S,S1,S2),color='black',thickness=_sage_const_3p ,alpha=a[-_sage_const_1 ])
    if pltbs:
        p += line(zip(x,BSsum),color='black',thickness=_sage_const_1p ,alpha=a[-_sage_const_1 ])
    p += point([(_sage_const_115 ,_sage_const_0 )],color='brown',size=_sage_const_40 ,gridlines=[Ks,[]])
    return p


""" Rysunki do skryptu ARF2 """

figlst = [] # inicjacja listy rysunk√≥w z nazwami

P_c,P_p = C(_sage_const_50 ,_sage_const_50 ,_sage_const_p05 ,_sage_const_90 /_sage_const_365p ,_sage_const_0p3 ).n(),P(_sage_const_50 ,_sage_const_50 ,_sage_const_p05 ,_sage_const_90 /_sage_const_365p ,_sage_const_0p3 ).n()

p=plot( longCALL(S,_sage_const_50 ,_sage_const_0 )-P_c,(S,_sage_const_0 ,_sage_const_100 ),color='brown')+\
 plot( longPUT(S,_sage_const_50 ,_sage_const_0 )-P_p,(S,_sage_const_0 ,_sage_const_100 ),color='red')+\
 plot( S-_sage_const_50 ,(S,_sage_const_0 ,_sage_const_100 ),color='blue')+\
 plot( (_sage_const_50 -_sage_const_50 *exp(-_sage_const_0p05 *_sage_const_90 /_sage_const_365p )),(S,_sage_const_0 ,_sage_const_100 ),figsize=_sage_const_4 ,color='green')
p.set_aspect_ratio(_sage_const_1 )
p.axes_labels(['cena S','zysk/strata'])


figlst.append([p,"parytet0"])



for [p,n] in figlst:
    #p.save('%s.jpg'%n)
    p.save('%s.png'%n)
    p.save('%s.pdf'%n)
    #p.save('%s.eps'%n)





